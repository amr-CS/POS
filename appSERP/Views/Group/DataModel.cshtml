@model appSERP.Models.FA.GroupModel
@using appSERP.Views.Shared.appResource
@{
    ViewBag.Title = "DataModel";
    Layout = "~/Views/Shared/appLayout/_ModalLayout.cshtml";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <!-- Header -->
    <div class="container-fluid">
        @Html.Action("ViewSettingModalHeader", "ViewSetting", new { pModalHeaderTitle = appResource.GroupId, pId = Model.GroupId })
    </div>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.HiddenFor(model => model.GroupId, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.GroupId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GroupId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MainGroupId, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectMainGroup" class="selectpicker form-control form-control" name="MainGroupId" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.MainGroupId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupNameL1, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.GroupNameL1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GroupNameL1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupNameL2, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.GroupNameL2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GroupNameL2, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupIsActive, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.GroupIsActive)
                @Html.ValidationMessageFor(model => model.GroupIsActive, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FixedAssetMethodId, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectFixedAssetMethod" class="selectpicker form-control form-control" name="FixedAssetMethodId" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.FixedAssetMethodId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupPercent, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.GroupPercent, new { htmlAttributes = new { @class = "form-control", @min = "0" } })
            @Html.ValidationMessageFor(model => model.GroupPercent, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupDebitAccount, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectGroupDebitAccount" class="selectpicker form-control GroupDebitAccount form-control" name="GroupDebitAccount" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.GroupDebitAccount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupCreditAccount, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectGroupCreditAccount" class="selectpicker GroupCreditAccount form-control form-control" name="GroupCreditAccount" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.GroupCreditAccount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupPurchaseAccount, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectGroupPurchaseAccount" class="selectpicker GroupPurchaseAccount form-control form-control" name="GroupPurchaseAccount" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.GroupPurchaseAccount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GroupSalesAccount, htmlAttributes: new { @class = "control-label col-md-12" })
        <div class="col-md-10">
            <select id="selectGroupSalesAccount" class="selectpicker GroupSalesAccount form-control form-control" name="GroupSalesAccount" data-live-search="true" data-live-search-placeholder="Search" data-actions-box="true"></select>
            @Html.ValidationMessageFor(model => model.GroupSalesAccount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@appResource.btnSave" class="btn btn-success" />
            <button type="button" class="btn btn-light" data-dismiss="modal">@appResource.btnClose</button>
        </div>
    </div>
</div>
}

<script>
   // List GetFixedAssetMethod
   $.post('/Home/GetFixedAssetMethod',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, FixedAssetMethod) {
               $('#selectFixedAssetMethod').append('<option data-id="' + FixedAssetMethod.FixedAssetMethodId + '" value="' + FixedAssetMethod.FixedAssetMethodId + '" sort-id="' + i + '">' + FixedAssetMethod.FixedAssetMethodNameL1 + '</option>')

           })
           var vData = '@Model.FixedAssetMethodId'

           if (vData != "0") {
               $('#selectFixedAssetMethod').val(@Model.FixedAssetMethodId);
           }
           // Refresh Select Picker
           $('.selectpicker').selectpicker('refresh');
       }
    )


   // List GetMainGroup
   $.post('/Home/GetMainGroup',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, MainGroup) {
               $('#selectMainGroup').append('<option data-id="' + MainGroup.MainGroupId + '" value="' + MainGroup.MainGroupId + '" sort-id="' + i + '">' + MainGroup.MainGroupNameL1 + '</option>')

           })
           var vData = '@Model.MainGroupId'

           if (vData != "0") {
               $('#selectMainGroup').val(@Model.MainGroupId);
           }
           // Refresh Select Picker
           $('.selectpicker').selectpicker('refresh');
       }
   )
</script>
<script>
        
                   // List GetGroupPurchaseAccount
   $.post('/Home/GetAccount',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, GroupDebitAccount) {
               $('#selectGroupDebitAccount').append('<option data-id="' + GroupDebitAccount.AccountParentId + '" value="' + GroupDebitAccount.AccountParentId + '" sort-id="' + i + '">' + GroupDebitAccount.AccountNameL1 + '</option>')
           })
           var vData = '@Model.GroupDebitAccount'

           if (vData != "0") {
               $('#selectGroupDebitAccount').val(@Model.GroupDebitAccount);
           }
           // Refresh Select Picker
           $('.GroupDebitAccount').selectpicker('refresh');
       }
    )

               // List GetGroupPurchaseAccount
   $.post('/Home/GetAccount',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, GroupCreditAccount) {
               $('#selectGroupCreditAccount').append('<option data-id="' + GroupCreditAccount.AccountParentId + '" value="' + GroupCreditAccount.AccountParentId + '" sort-id="' + i + '">' + GroupCreditAccount.AccountNameL1 + '</option>')
           })
           var vData = '@Model.GroupCreditAccount'

           if (vData != "0") {
               $('#selectGroupCreditAccount').val(@Model.GroupCreditAccount);
           }
           // Refresh Select Picker
           $('.GroupCreditAccount').selectpicker('refresh');
       }
    )

                   // List GetMainGroupPurchaseAccount
   $.post('/Home/GetAccount',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, GroupPurchaseAccount) {
               $('#selectGroupPurchaseAccount').append('<option data-id="' + GroupPurchaseAccount.AccountParentId + '" value="' + GroupPurchaseAccount.AccountParentId + '" sort-id="' + i + '">' + GroupPurchaseAccount.AccountNameL1 + '</option>')
           })
           var vData = '@Model.GroupPurchaseAccount'

           if (vData != "0") {
               $('#selectGroupPurchaseAccount').val(@Model.GroupPurchaseAccount);
           }
           // Refresh Select Picker
           $('.GroupPurchaseAccount').selectpicker('refresh');
       }
    )
   // List GetGroupSalesAccount
   $.post('/Home/GetAccount',
       null,
       function (data, status) {
           var vDataJSON = JSON.parse(data);
           $.each(vDataJSON, function (i, GroupPurchaseAccount) {
               $('#selectGroupSalesAccount').append('<option data-id="' + GroupPurchaseAccount.AccountParentId + '" value="' + GroupPurchaseAccount.AccountParentId + '" sort-id="' + i + '">' + GroupPurchaseAccount.AccountNameL1 + '</option>')
           })
           var vData = '@Model.GroupSalesAccount'

           if (vData != "0") {
               $('#selectGroupSalesAccount').val(@Model.GroupSalesAccount);
           }
           // Refresh Select Picker
           $('.GroupSalesAccount').selectpicker('refresh');
       }
    )



</script>